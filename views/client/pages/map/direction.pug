doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title= title
    script(src="https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.js")
    script(src="https://cdn.jsdelivr.net/npm/sweetalert2@11")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css")
    link(rel="stylesheet", href="/css/style.css")

  body
    button#move-to-location-btn
        i.fa-solid.fa-location-crosshairs
    div#map(style="width: 100%; height: 100vh;")

    script.
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 5000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener("mouseenter", Swal.stopTimer);
                toast.addEventListener("mouseleave", Swal.resumeTimer);
                toast.addEventListener("click", Swal.close);
            },
        });

      const maptitleskey = !{maptitleskey};
      const APIKey = !{APIKey};

      goongjs.accessToken = maptitleskey;
      let userCoords = null;
      let destinationCoords = null;
      let userMarker = null;

      const map = new goongjs.Map({
          container: 'map',
          style: 'https://tiles.goong.io/assets/goong_map_web.json',
          center: [105.83991, 21.02800],
          zoom: 9,
      });
        const fullscreenControl = new goongjs.FullscreenControl();
        map.addControl(fullscreenControl, 'top-right');

      document.addEventListener('DOMContentLoaded', () => {

          const urlParams = new URLSearchParams(window.location.search);
          const destLat = parseFloat(urlParams.get('destLat'));
          const destLng = parseFloat(urlParams.get('destLng'));

        if (!isNaN(destLat) && !isNaN(destLng)) {
              destinationCoords = [destLng, destLat];
              const marker = new goongjs.Marker({ color: 'red' })
                  .setLngLat(destinationCoords)
                  .setPopup(new goongjs.Popup().setHTML('<h3>Điểm đến</h3>'))
                  .addTo(map);
          } else {
            Toast.fire({
                icon: 'warning',
                title: 'Vui lòng truyền đúng tọa độ destLat, destLong'
            })
              return;
          }

          if (navigator.geolocation) {
              navigator.geolocation.watchPosition(
                  (position) => {
                      userCoords = [position.coords.longitude, position.coords.latitude];

                      if (!userMarker) {
                          userMarker = new goongjs.Marker({ color: 'blue' })
                              .setLngLat(userCoords)
                              .setPopup(new goongjs.Popup().setHTML('<h3>Vị trí của bạn</h3>'))
                              .addTo(map);
                          map.flyTo({
                              center: userCoords,
                              zoom: 16,
                          });
                          const userC = [userMarker.getLngLat().lng, userMarker.getLngLat().lat];
                          direct(userC, destinationCoords);
                      } else {
                          userMarker.setLngLat(userCoords);
                          const userC = [userMarker.getLngLat().lng, userMarker.getLngLat().lat];
                          direct(userC, destinationCoords);
                      }
                  },
                  (error) => {
                      console.error('Lỗi lấy vị trí:', error);
                      Toast.fire({
                        icon: 'info',
                        title: 'Đang lấy vị trí hiện tại! Vui lòng cấp quyền vị trí nếu bạn chưa thực hiện'
                      })
                  },
                  {
                      enableHighAccuracy: true,
                      maximumAge: 0,
                      timeout: 10000,
                  }
              )
          };

      });


        function direct(userCoords, destinationCoords){
            const directionsUrl = `https://rsapi.goong.io/Direction?origin=${userCoords[1]},${userCoords[0]}&destination=${destinationCoords[1]},${destinationCoords[0]}&vehicle=car&api_key=${APIKey}`;
            fetch(directionsUrl)
            .then(response => response.json())
            .then(data => {
                if (data.routes && data.routes.length > 0) {
                    const polyline = data.routes[0].overview_polyline.points;
                    if (polyline) {
                        const decodedPolyline = decodePolyline(polyline);
                        map.on('load', () => {
                            if (map.getSource('route')) {
                            map.getSource('route').setData({
                                type: 'Feature',
                                geometry: {
                                    type: 'LineString',
                                    coordinates: decodedPolyline,
                                },
                            });
                        }else{
                            map.addSource('route', {
                                type: 'geojson',
                                data: {
                                    type: 'Feature',
                                    geometry: {
                                        type: 'LineString',
                                        coordinates: decodedPolyline,
                                    },
                                },
                            });
                        }


                        map.addLayer({
                            id: 'route',
                            type: 'line',
                            source: 'route',
                            paint: {
                                'line-color': '#0f53fd',
                                'line-width': 5,
                            },
                        });
                        })
                    }
                } else {
                    Toast.fire({
                        icon: 'error',
                        title: 'Không tìm thấy đường đi vui lòng thử lại'
                    })
                }
            })
            .catch(error => {
                console.error('Lỗi khi tạo tuyến đường:', error);
                Toast.fire({
                    icon: 'error',
                    title: 'Không thể tạo đường dẫn! Vui lòng thử lại'
                })
            });
        }


      function decodePolyline(encoded) {
          let points = [];
          let index = 0, lat = 0, lng = 0;

          while (index < encoded.length) {
              let shift = 0, result = 0;
              let byte;

              do {
                  byte = encoded.charCodeAt(index++) - 63;
                  result |= (byte & 0x1f) << shift;
                  shift += 5;
              } while (byte >= 0x20);

              let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
              lat += dlat;

              shift = 0;
              result = 0;

              do {
                  byte = encoded.charCodeAt(index++) - 63;
                  result |= (byte & 0x1f) << shift;
                  shift += 5;
              } while (byte >= 0x20);

              let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
              lng += dlng;

              points.push([lng / 1e5, lat / 1e5]);
          }

          return points;
      }
      document.getElementById('move-to-location-btn').addEventListener('click', () => {
            if (userCoords) {
                map.flyTo({
                    center: userCoords,
                    zoom: 14,
                });
            } else {
            Toast.fire({
                icon: 'info',
                title: 'Đang lấy vị trí hiện tại! Vui lòng cấp quyền vị trí nếu bạn chưa thực hiện'
            })
            }
        });
